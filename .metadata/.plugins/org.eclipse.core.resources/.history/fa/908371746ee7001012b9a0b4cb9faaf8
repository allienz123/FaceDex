package com.wingman;

import java.net.MalformedURLException;
import com.wingman.models.PersonModel;
import com.wingman.parsers.AppharborWrapper;
import com.wingman.parsers.FaceComWrapper;

import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Window;
import android.widget.Toast;



public class AddUserTagActivity extends Activity {
	private static final int ADD_NEW_USER_REQUEST = 0;
	//private static final int ADD_NEW_TAG_REQUEST = 1;

	public void onCreate(Bundle bundle) {
		super.onCreate(bundle);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		//setContentView(R.layout.addusertag);
		Intent i = getIntent();
		Bundle extras = i.getExtras();
		PersonModel pm = (PersonModel) extras.get("PersonModel");
		
		Intent myIntent = new Intent(getBaseContext(), AddUserActivity.class);
		myIntent.putExtra("PersonModel", pm);
		startActivityForResult(
                 myIntent,
                 ADD_NEW_USER_REQUEST);
	}
		

	
	
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == ADD_NEW_USER_REQUEST) {
			if (resultCode == RESULT_OK) {
			// User input received
		    CharSequence text = "Connecting to server, please wait.";
			Toast toast = Toast.makeText(getBaseContext(), text, Toast.LENGTH_LONG);
		    toast.show();
		    
		    PersonModel pm = (PersonModel) data.getExtras().get("UserInput");
		    
		    // Add tag to central db's
			new InsertDescriptionTask().execute(pm);
			} else if(resultCode == RESULT_CANCELED) {
				
            	finish();
            }
		}
	}

	class InsertDescriptionTask extends AsyncTask<PersonModel, Void, PersonModel> {
		// Execute in UI thread after task completes
		protected void onPostExecute(PersonModel pm) {

			Intent i = new Intent(getBaseContext(), DisplayDescriptionActivity.class);
			i.putExtra("PersonModel", pm);
			startActivity(i);
			//finish();
				/*TextView tv = (TextView) findViewById(R.id.textView1);
				List<PersonModel> result = null;
				AppharborWrapper ahw = new AppharborWrapper(pm);
				try {
					result = ahw.FindAllDescriptions(pm);
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				StringBuilder sb = new StringBuilder();
				for(PersonModel elem : result)
				{
					sb.append("Name: " + elem.getFirstName() + " " + elem.getLastName() + "\n");
				}
				
				tv.setText(sb.toString());
				Toast toast = Toast.makeText(getBaseContext(), "HI", Toast.LENGTH_LONG);
			    toast.show();
			    */

		}

		@Override
		protected PersonModel doInBackground(PersonModel... arg0) {
			int count = arg0.length;
			PersonModel myPm = new PersonModel();
			if(count > 0) {
				myPm = arg0[0];
				
				// Store input in central db
            	AppharborWrapper ah = new AppharborWrapper(myPm);
            	FaceComWrapper fcw = new FaceComWrapper();
            	try {
            		
            		myPm = ah.addPersonTag(myPm);
					// Add person to face.com, with the PersonID generated by AH
	            	myPm = fcw.addPerson(myPm);
	            	ah.attachTag(myPm.getID_DESCRIPTION(), myPm.getIdTag());
	            	
				} catch (MalformedURLException e) {
					e.printStackTrace();
				}
				
			}
			return myPm;

			
		}
	}
}

